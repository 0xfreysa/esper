{
  "version": "1.0.0",
  "EXPECTED_PCRS": {
    "1": "S01bNmGz78EpIJAMgOEm5M54PFIt5sAqKlv3rzorkye4Z3bxiOS+HBxAShKdvaST",
    "2": "J38z0mC58icHRsrH6HGeN8BGWHZiq7o6HOMw8SayJCMlmOKnFURlQRoqN01q3V0l"
  },
  "PROVIDERS": [
    {
      "id": 1,
      "host": "x.com",
      "urlRegex": "^https:\\/\\/x\\.com\\/i\\/api\\/graphql\\/[\\w-]+\\/AccountOverviewQuery(\\?.*)?$",
      "targetUrl": "https://x.com/i/account_analytics",
      "method": "GET",
      "title": "X Verified followers",
      "description": "",
      "icon": "twitterPremium",
      "responseType": "json",
      "preprocess": "function process(jsonString) { const obj = JSON.parse(jsonString); return { id: obj.data.viewer_v2.user_results.result.id, verified_followers: obj.data.viewer_v2.user_results.result.verified_follower_count }; }",
      "attributes": ["{id: id, verified_followers: verified_followers}"]
    },
    {
      "id": 2,
      "host": "x.com",
      "urlRegex": "^https:\\/\\/x\\.com\\/i\\/api\\/graphql\\/[\\w\\d]+\\/UserByScreenName(\\?.*)?$",
      "targetUrl": "https://www.x.com/home",
      "method": "GET",
      "title": "Verify X subscription",
      "description": "",
      "icon": "twitterPremium",
      "responseType": "json",
      "actionSelectors": [
        "div[data-testid^='UserAvatar-Container-'] a[role=\"link\"] img[alt][draggable=\"true\"]"
      ],
      "preprocess": "function process(jsonString) { const object = JSON.parse(jsonString); const parts = object.data.user.result.legacy.created_at.split(' '); const time = parts[3].split(':'); const months = {   Jan: 0,   Feb: 1,   Mar: 2,   Apr: 3,   May: 4,   Jun: 5,   Jul: 6,   Aug: 7,   Sep: 8,   Oct: 9,   Nov: 10,   Dec: 11, }; const createdAt = new Date(   parseInt(parts[5]),   months[parts[1]],   parseInt(parts[2]),   parseInt(time[0]),   parseInt(time[1]),   parseInt(time[2]) ); const targetDate = new Date('2023-03-01'); const PreGPT4 = createdAt < targetDate; const verified = object.data.user.result.is_blue_verified; const bio = object.data.user.result.legacy.description; const bioMentionsFreysa = bio.toLowerCase().includes('it starts with freysa...'); if(!verified || !PreGPT4) throw new Error('Invalid account'); return {   verified,   bioMentionsFreysa: bioMentionsFreysa,   PreGPT4: PreGPT4 }; } ",
      "attributes": ["{verified: verified, PreGPT4: PreGPT4}"]
    },
    {
      "id": 3,
      "host": "chatgpt.com",
      "urlRegex": "^https:\\/\\/chatgpt\\.com\\/backend-api\\/sentinel\\/chat-requirements(.*)?$",
      "targetUrl": "https://chatgpt.com/",
      "method": "POST",
      "title": "Verify ChatGPT subscription",
      "description": "",
      "icon": "chatgpt",
      "responseType": "json",
      "preprocess": "function process(jsonString) { const obj = JSON.parse(jsonString); const paid = obj.persona === 'chatgpt-paid'; if(!paid) throw new Error('Invalid account'); return { paid: paid }; }",
      "attributes": ["{paid: paid}"]
    },
    {
      "id": 4,
      "host": "reddit.com",
      "urlRegex": "^https:\\/\\/www\\.reddit\\.com\\/user\\/[a-zA-Z0-9]+.*",
      "targetUrl": "https://www.reddit.com",
      "method": "GET",
      "title": "Verify Reddit karma",
      "description": "",
      "icon": "reddit",
      "responseType": "html",
      "actionSelectors": [
        "#expand-user-drawer-button",
        "#user-drawer-content > ul:nth-child(2) > faceplate-tracker:nth-child(1) > li > a"
      ],
      "attributes": ["{karma: karma}"],
      "preprocess": "function process(html) { const karmaRegex = /<span[^>]*data-testid=\"karma-number\"[^>]*>\\s*(\\d+)\\s*<\\/span>/; const karmaMatch = html.match(karmaRegex); return {karma: karmaMatch ? karmaMatch[1] : null} }"
    },
    {
      "id": 5,
      "host": "x.com",
      "urlRegex": "^https:\\/\\/api\\.(x|twitter)\\.com\\/1\\.1\\/account\\/settings\\.json(\\?.*)?$",
      "targetUrl": "https://www.x.com/home",
      "method": "GET",
      "title": "Verify X username",
      "description": "",
      "icon": "twitter",
      "responseType": "json",
      "attributes": ["{screen_name: screen_name}"]
    },
    {
      "id": 6,
      "host": "robinhood.com",
      "urlRegex": "^https:\\/\\/bonfire\\.robinhood\\.com\\/portfolio\\/performance\\/[a-zA-Z0-9]+(\\?.*)?$",
      "targetUrl": "https://robinhood.com/",
      "method": "GET",
      "title": "Robinhood balance greater than $10,000",
      "description": "",
      "icon": "robinhood",
      "responseType": "json",
      "attributes": [
        "{over_10k: to_number(performance_baseline.amount) >`10000` && performance_baseline.currency_code == 'USD'}"
      ]
    },
    {
      "id": 7,
      "host": "secure.ssa.gov",
      "urlRegex": "^https:\\/\\/secure\\.ssa\\.gov\\/myssa\\/myprofile-api\\/profileInfo.*",
      "targetUrl": "https://secure.ssa.gov/myssa/myprofile-ui/main",
      "method": "GET",
      "title": "US SSA",
      "description": "",
      "icon": "ssa",
      "responseType": "json",
      "attributes": [
        "{age: age, isValid: length(loggedInUserInfo.cossn) == `11` } "
      ],
      "preprocess": "function process(jsonString) { const startIndex = jsonString.indexOf('{'); const endIndex = jsonString.lastIndexOf('}') + 1; if (startIndex === -1 || endIndex === 0) { return {}; } try { const cleanedResponse = jsonString.slice(startIndex, endIndex); const s = JSON.parse(cleanedResponse); const currentDate = new Date(); const birthDate = new Date(s.loggedInUserInfo.dobYear, s.loggedInUserInfo.dobMonth - 1, s.loggedInUserInfo.dobDay); let age = currentDate.getFullYear() - birthDate.getFullYear(); if (currentDate.getMonth() < birthDate.getMonth() || (currentDate.getMonth() === birthDate.getMonth() && currentDate.getDate() < birthDate.getDate())) { age--; } s.age = age; return s; } catch (e) { return {}; }  }"
    },
    {
      "id": 8,
      "host": "ubereats.com",
      "urlRegex": "^https:\\/\\/www\\.ubereats\\.com\\/_p\\/api\\/getPastOrdersV1.*",
      "targetUrl": "https://www.ubereats.com/orders",
      "method": "POST",
      "title": "Uber Eats orders",
      "description": "",
      "icon": "ubereats",
      "responseType": "json",
      "attributes": [
        "{usd_total: USD.totalPrice, usd_count: USD.orderCount, eur_total: EUR.totalPrice, eur_count: EUR.orderCount}"
      ],
      "preprocess": "function process(jsonString) { const totals = Object.values(JSON.parse(jsonString).data.ordersMap).reduce((totals, order) => { const price = order.fareInfo.totalPrice; const currency = order.baseEaterOrder.currencyCode; if (typeof price === 'number' && currency) { if (!totals[currency]) { totals[currency] = { totalPrice: 0, orderCount: 0 }; } totals[currency].totalPrice += price; totals[currency].orderCount += 1; } return totals; }, {}); Object.keys(totals).forEach(currency => totals[currency].totalPrice = (totals[currency].totalPrice / 100).toFixed(2)); return totals; } "
    },
    {
      "id": 9,
      "host": "secure.chase.com",
      "urlRegex": "^https:\\/\\/secure.chase.com\\/svc\\/wr\\/profile\\/secure\\/creditscore\\/v2\\/credit-journey\\/servicing\\/inquiry-maintenance\\/v1\\/customers\\/credit-journey-insight-outlines.*",
      "targetUrl": "https://secure.chase.com/web/auth/dashboard#/dashboard/overview",
      "method": "GET",
      "title": "Chase credit score",
      "description": "",
      "icon": "chase",
      "responseType": "json",
      "attributes": [
        "{creditScore: score, high_score: high_score, grade_name: grade_name}"
      ],
      "preprocess": "function process(jsonString) { const s =JSON.parse(jsonString); return {score: s.creditScoreOutlineResponse.creditScore.currentCreditScoreSummary.creditRiskScore, high_score: s.creditScoreOutlineResponse.creditScore.currentCreditScoreSummary.creditRiskScore > 700, grade_name: s.creditScoreOutlineResponse.creditScore.currentCreditScoreSummary.creditScoreGradeName} }"
    }
  ]
}
